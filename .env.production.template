# Unara Travel API - Production Environment Configuration
# Copy this file to .env.production and fill in the actual values

# ===========================================
# APPLICATION CONFIGURATION
# ===========================================
NODE_ENV=production
PORT=3000
API_PREFIX=api

# Application Info
APP_NAME=Unara Travel API
APP_VERSION=1.0.0

# ===========================================
# DATABASE CONFIGURATION
# ===========================================
# Primary database connection
DB_HOST=your-production-db-host
DB_PORT=5432
DB_NAME=unara_production
DB_USERNAME=unara_api_user
DB_PASSWORD=your-secure-database-password

# Connection pool settings
DB_POOL_MIN=5
DB_POOL_MAX=20
DB_CONNECTION_TIMEOUT=10000
DB_IDLE_TIMEOUT=30000

# Read replica (optional for read-heavy operations)
DB_READ_HOST=your-read-replica-host
DB_READ_PORT=5432
DB_READ_USERNAME=unara_readonly

# ===========================================
# JWT AUTHENTICATION CONFIGURATION
# ===========================================
# CRITICAL: Use a strong, random 256-bit key in production
# Generate with: openssl rand -base64 32
JWT_SECRET=your-256-bit-production-jwt-secret-here-replace-this
JWT_EXPIRES_IN=15m
JWT_REFRESH_EXPIRES_IN=7d

# ===========================================
# SECURITY CONFIGURATION
# ===========================================
# CORS Configuration
CORS_ORIGINS=https://your-frontend-domain.com,https://admin.your-domain.com
CORS_CREDENTIALS=true

# Rate Limiting (requests per window)
RATE_LIMIT_SHORT_TTL=1000
RATE_LIMIT_SHORT_LIMIT=10
RATE_LIMIT_MEDIUM_TTL=10000
RATE_LIMIT_MEDIUM_LIMIT=100
RATE_LIMIT_LONG_TTL=60000
RATE_LIMIT_LONG_LIMIT=1000

# Content Security Policy
CSP_DEFAULT_SRC='self'
CSP_SCRIPT_SRC='self'
CSP_STYLE_SRC='self' 'unsafe-inline'
CSP_IMG_SRC='self' data: https:

# ===========================================
# LOGGING AND MONITORING
# ===========================================
LOG_LEVEL=info
LOG_FORMAT=json
LOG_FILE_PATH=/var/log/unara-api/

# Application Performance Monitoring
APM_ENABLED=true
APM_SERVER_URL=your-apm-server-url
APM_SECRET_TOKEN=your-apm-secret-token

# Metrics collection
METRICS_ENABLED=true
METRICS_PORT=9090
PROMETHEUS_ENDPOINT=/metrics

# Health check configuration
HEALTH_CHECK_ENABLED=true
HEALTH_CHECK_DATABASE=true
HEALTH_CHECK_MEMORY_THRESHOLD=0.9

# ===========================================
# EXTERNAL SERVICES
# ===========================================
# Email Service (SMTP)
SMTP_HOST=your-smtp-host
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=your-smtp-username
SMTP_PASS=your-smtp-password
FROM_EMAIL=noreply@your-domain.com
FROM_NAME=Unara Travel

# File Storage (S3 or compatible)
STORAGE_ENABLED=true
STORAGE_ENDPOINT=https://s3.your-region.amazonaws.com
STORAGE_BUCKET=unara-production-assets
STORAGE_ACCESS_KEY=your-s3-access-key
STORAGE_SECRET_KEY=your-s3-secret-key
STORAGE_REGION=us-east-1

# Redis (for caching and sessions)
REDIS_ENABLED=true
REDIS_HOST=your-redis-host
REDIS_PORT=6379
REDIS_PASSWORD=your-redis-password
REDIS_DB=0
REDIS_KEY_PREFIX=unara:

# ===========================================
# FEATURE FLAGS
# ===========================================
FEATURE_USER_REGISTRATION=true
FEATURE_EMAIL_VERIFICATION=true
FEATURE_PASSWORD_RESET=true
FEATURE_TRIP_SHARING=true
FEATURE_PUBLIC_TRIPS=true
FEATURE_ANALYTICS=true

# ===========================================
# BACKUP AND MAINTENANCE
# ===========================================
# Database backup configuration
BACKUP_ENABLED=true
BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
BACKUP_RETENTION_DAYS=30
BACKUP_STORAGE_PATH=/backups

# Maintenance mode
MAINTENANCE_MODE=false
MAINTENANCE_MESSAGE=The system is temporarily under maintenance. Please try again later.

# ===========================================
# SSL/TLS CONFIGURATION
# ===========================================
# If handling SSL at application level (not recommended, use reverse proxy)
SSL_ENABLED=false
SSL_CERT_PATH=/path/to/certificate.crt
SSL_KEY_PATH=/path/to/private.key

# ===========================================
# THIRD-PARTY INTEGRATIONS
# ===========================================
# Analytics service
ANALYTICS_ENABLED=true
ANALYTICS_API_KEY=your-analytics-api-key

# Error tracking (Sentry)
SENTRY_ENABLED=true
SENTRY_DSN=your-sentry-dsn
SENTRY_ENVIRONMENT=production
SENTRY_RELEASE=1.0.0

# Social media integrations (if applicable)
FACEBOOK_APP_ID=your-facebook-app-id
GOOGLE_CLIENT_ID=your-google-client-id

# ===========================================
# PERFORMANCE OPTIMIZATION
# ===========================================
# Node.js performance settings
NODE_OPTIONS=--max-old-space-size=2048

# Compression
COMPRESSION_ENABLED=true
COMPRESSION_LEVEL=6

# Cache settings
CACHE_ENABLED=true
CACHE_TTL_DEFAULT=3600
CACHE_TTL_LONG=86400

# ===========================================
# DEVELOPMENT AND DEBUG (Production should be disabled)
# ===========================================
# API Documentation (disable in production for security)
SWAGGER_ENABLED=false
SWAGGER_PATH=/api/docs

# Debug settings (should be false in production)
DEBUG=false
VERBOSE_LOGGING=false

# ===========================================
# CONTAINER ORCHESTRATION
# ===========================================
# Kubernetes/Docker specific
CONTAINER_MEMORY_LIMIT=2Gi
CONTAINER_CPU_LIMIT=1000m
REPLICA_COUNT=3

# Health check endpoints for load balancers
READINESS_PROBE_PATH=/health/ready
LIVENESS_PROBE_PATH=/health/live

# ===========================================
# ENVIRONMENT VALIDATION
# ===========================================
# Set to 'true' to validate all required environment variables on startup
VALIDATE_ENV=true

# Required environment variables (comma-separated list)
REQUIRED_ENV_VARS=DB_HOST,DB_PASSWORD,JWT_SECRET,SMTP_HOST,SMTP_PASS

# ===========================================
# NOTES FOR DEPLOYMENT
# ===========================================
# 1. Replace ALL placeholder values with actual production values
# 2. Store sensitive values in a secure secret management system
# 3. Use environment-specific values (staging vs production)
# 4. Regularly rotate secrets (JWT_SECRET, database passwords, API keys)
# 5. Monitor and alert on configuration changes
# 6. Backup configuration securely
# 7. Use infrastructure as code for consistency
# 8. Validate configuration before deployment
# 9. Test configuration in staging environment first
# 10. Document any custom configuration requirements