name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  quality-check:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run build

    - name: Run unit tests
      run: npm run test:cov
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        JWT_SECRET: test-jwt-secret-for-testing-only

    - name: Run integration tests
      run: npm run test:e2e
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        JWT_SECRET: test-jwt-secret-for-testing-only

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level high

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Build and Push Docker Image
  build-and-push:
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging (develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Examples:
        # - Update Kubernetes deployment
        # - Deploy to AWS ECS
        # - Update Docker Compose on staging server
        # - Run database migrations
        echo "Staging deployment completed!"

    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging..."
        # Add smoke tests here
        # curl -f https://staging-api.yourapp.com/health || exit 1
        echo "Smoke tests passed!"

  # Deploy to Production (main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create deployment artifact
      run: |
        mkdir -p deployment
        echo "IMAGE_TAG=${{ needs.build-and-push.outputs.image-tag }}" > deployment/version.env
        cp docker-compose.yml deployment/
        cp -r database/ deployment/

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Examples:
        # - Blue/green deployment
        # - Rolling update in Kubernetes
        # - Deploy to AWS ECS with proper health checks
        # - Run database migrations with rollback capability
        echo "Production deployment completed!"

    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add comprehensive health checks here
        # curl -f https://api.yourapp.com/health || exit 1
        # Check database connectivity
        # Verify critical endpoints
        echo "Health checks passed!"

    - name: Notify deployment
      if: always()
      run: |
        echo "Notifying team about deployment status..."
        # Add notifications here (Slack, Discord, email, etc.)

# Workflow for handling failures
  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure() && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Rollback production deployment
      run: |
        echo "Production deployment failed, initiating rollback..."
        # Add rollback procedures here
        # - Restore previous Docker image
        # - Rollback database migrations
        # - Verify rollback success
        echo "Rollback completed!"

    - name: Notify rollback
      run: |
        echo "Notifying team about rollback..."
        # Send critical alerts about rollback